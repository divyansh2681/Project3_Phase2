#!/usr/bin/env python


# ======================================================================
#                   A* Algorithm with holonomic Constraints
# ======================================================================

"""
Authors: Jai Sharma and Divyansh Agrawal
Assignment: Project 3 - Phase 2
Task: implement an A* Path Planning algorithm on a TurtleBot like Robot.
    Incorporate Holomic Constrainst and save wheel velocities on a txt file
"""
# ======================================================================
#                            Import Libraries
# ======================================================================

import time
import pygame
import math
import numpy as np
import rospkg

rospack = rospkg.RosPack()

# ======================================================================
#                              Node Class 
# ======================================================================

class Node:
    
    # each Node has the following attributes
    def __init__(self, state, parent, cost_to_come, cost_to_go, cost, ul, ur):
        
        self.state = state            # position of current node                                          
        self.parent = parent          # parent node                                         
        self.cost_to_come = cost_to_come           # cost to come                            
        self.cost_to_go = cost_to_go               # cost to go to goal              
        self.cost = cost                           # total cost                            
        self.ul = ul                               # linear velocities                        
        self.ur = ur                                                            
    
    def __repr__(self):
        return str(self.state) 
    
    def obstacleCheck(self, currentNode):

        x, y = currentNode[0], currentNode[1]

        # check if node is within Map Limits
        if (x < 0) or (x > 1000) or (y < 0) or (y > 1000): 
            return(True)
        # Top Circle
        elif (x-200)**2 + (y-800)**2 <= (100+clearance)**2:   
            return(True)
        # Bottom Circle
        elif (x-200)**2 + (y-200)**2 <= (100+clearance)**2:                
            return(True)
        # Square
        elif (x >= 25-clearance) and (x <= 175+clearance) and (y >= 425-clearance) and (y <= 575+clearance): 
            return(True)
        # Middle Rectangle
        elif (x >= 375-clearance) and (x <= 625+clearance) and (y >= 425-clearance) and (y <= 575+clearance):      
            return(True)
        # Bottom Rectangle
        elif (x >= 725-clearance) and (x <= 875+clearance) and (y >= 200-clearance) and (y <= 400+clearance):      
            return(True)
    
        else:
            return(False)

    def nodeRounding(self, currentNode):
        x, y, thetaRad = currentNode[0], currentNode[1], currentNode[2]
        thetaDeg = (thetaRad * 180 )/ np.pi
        decimalX, decimalY = math.modf(x)[0], math.modf(y)[0]
        
        # approximate x and y position values to closest integers value
        x = math.floor(x) if decimalX < 0.5 else np.ceil(x)
        y = np.floor(y) if decimalY < 0.5 else np.ceil(y)

        # approximate x and y position values to closest 30 degree value
        theta30 = thetaDeg / 30
        thetaDec, thetaInt = math.modf(theta30)[0], math.modf(theta30)[1]
        thetaDeg = thetaInt*30 if thetaDec < 0.5 else (thetaInt+ 1)*30
            
        thetaDeg = thetaDeg % 360  # limit range between 0 and 360                                      
        thetaRad = np.radians(thetaDeg)
        return [x, y, thetaRad]

    def goalSpaceCheck(self):
        # This method is used to check if robot is in the goal radius, because it may not reach the exact loaction due to limited action set
        x_goal = goal.state[0]
        y_goal = goal.state[1]
        
        if (self.state[0]-x_goal)**2 + (self.state[1]-y_goal)**2 - 625 <= 0:   # radius = 25
            return True
        else:
            return False
        
    def getNeighbours(self,rpmLeft, rpmRight):
        r = 3.8 
        #  get linear velocity for left and right wheel
        uL = (2*np.pi * r * rpmLeft) / 60   
        uR = (2*np.pi * r * rpmRight) / 60   
        #  Initialize Action Sets 
        actionSets = [[uL,uL], [uR,uR],[uL,0],[0,uR],[uL,uR],[uR,uL],[uR,0],[0,uL]]
        neighbours = []
        for action in actionSets:
            child = self.actionCost(action[0], action[1])
            if child:
                neighbours.append(child)
        return(neighbours)
    
    def actionCost(self, ul, ur):        
        t, x, y = 0, 0, 0   # initial coordinates
        r = 3.8    
        L = 3.54    
        dt = 0.05
        theta = self.state[2]  
        D=0
        
        while t<1:    # perform action for 1 second and find cost
            t = t + dt # time step
            dx = 0.5*r * (ul + ur) * math.cos(theta) * dt
            dy = 0.5*r * (ul + ur) * math.sin(theta) * dt 
            x += dx               
            y += dy
            theta += (r / L) * (ur - ul) * dt        
            D = D + (dx**2 + dy**2)**0.5
            currentNode = [self.state[0] + x, self.state[1] + y, theta]
            # make sure new node is acceptable
            if self.obstacleCheck(currentNode):
                return None

      
        currentNode = self.nodeRounding(currentNode)
        cost_to_come = self.cost_to_come + D
        cost_to_go = ((currentNode[0] - goal.state[0])**2 + (currentNode[1] - goal.state[1])**2)**0.5
        cost = cost_to_come + cost_to_go
        
        # Initialize valid child nodes
        childNode = Node(currentNode, self, cost_to_come, cost_to_go, cost, ul, ur)

        return(childNode)
    
    def backtrack(self, goalNode):
        current_node = goalNode
        BackTrackedList = []
        # append list until start node reached
        while(current_node.state != self.state):
            BackTrackedList.append(current_node)
            current_node = current_node.parent

        print(BackTrackedList)
        print(len(BackTrackedList))
        return(BackTrackedList)
    
# ======================================================================
#                              Main Function
# ======================================================================
 
if __name__== "__main__":

    global goal
    global clearance
    
    # ======================================================================
    #              take User Input --> start, goal, clearance
    # ======================================================================
    
    while(True):
        magFactor = 100 #  magnifying factor used to limit processing of decimals
        
        x_start = float(input("Please input X coordinate of the Start node:\n"))
        y_start = float(input("Please input Y coordinate of the Start node:\n"))
        theta_start = float(input("Please input Theta Orientation of the Start node:\n"))
        x_goal = float(input("Please input X coordinate of the Goal node:\n"))
        y_goal = float(input("Please input Y coordinate of the Goal node:\n"))
        theta_goal = float(input("Please input Theta Orientation of the Goal node:\n"))
        print("The rpm for both wheels are set to 50")
        rpmLeft, rpmRight = 50, 60
        x_start , y_start = x_start*magFactor, y_start*magFactor  # mag factor
        x_goal , y_goal = x_goal*magFactor, y_goal*magFactor  # mag factor
         # Clearance
        clearance = float(input("Please input the clearance (between 0.05 and 0.1):\n"))
        clearance = clearance*100 # mag factor
        start = Node([x_start, y_start, math.radians(theta_start)] , None, 0, ((x_start - x_goal)**2 + (y_start -y_goal)**2)**0.5, ((x_start - x_goal)**2 + (y_start - y_goal)**2)**0.5, 0, 0)
        goal =  Node([x_goal, y_goal, math.radians(theta_goal)] , None, 9999999, 0, 9999999, 0 , 0)
        # Check if input nodes are acceptable
        if goal.obstacleCheck(goal.state) or start.obstacleCheck(start.state):
            print("Error: input nodes not acceptable. Please try again.")
        else:
            break    

    # ======================================================================
    #                         Implement A* Algorithm
    # ======================================================================
    
    queue = []
    queue.append(start)

    # build lists to store pose and cost of node
    visitedCost = np.zeros((1001,1001,12))
    visitedParentPose = [[[None for ori in range(12)]for col in range(1001)] for row in range(1001)]
      
    visitedList = []
    visitedList.append(start)
    
    startTime = time.time()

    while queue:
        queue.sort(key = lambda x: x.cost)
        currentNode = queue.pop(0)
        
        # Possibility 1 --> current node is within goal space (radius of 25)
        if currentNode.goalSpaceCheck():
            print("Goal has been Reached\n")      
            shortest = start.backtrack(currentNode)
            break

        # Possibility 2 --> current node not visited yet
        neighbours = currentNode.getNeighbours(rpmLeft, rpmRight) 
        for child in neighbours:
            x = int(child.state[1])                                        
            y = int(child.state[0])                                        
            th = int(math.degrees(child.state[2])/30)
     
            # Possibility 2a --> Neighbour has not been visited
            if visitedCost[x][y][th] == 0:
                visitedCost[x][y][th] = child.cost                                  
                visitedParentPose[x][y][th] = child.parent.state
                visitedList.append(child)
                queue.append(child)
                print(x,y,th, "->", child.state[1], child.state[0], child.state[2],)
            
            # Possibility 2b --> Neighbour has been visited, compare costs
            elif visitedCost[x][y][th] > child.cost:
            # else:
                print('update alert:',visitedCost[x][y][th] , child.cost)
                visitedCost[x][y][th] = child.cost
                visitedParentPose[x][y][th] = child.parent.state

    print("Program Fully Executed !!")                                    
    print("Time to run Code", time.time() - startTime)

# ======================================================================
#                              Save to txt file
# ======================================================================

with  open("turtlebotVel.txt", "w") as file:
    shortest = shortest[::-1]
    for node in shortest:
        child, parent, ul, ur = node.state, node.parent, node.ul, node.ur
        child[0], child[1] = child[0]/100, child[1]/100  # scale back to original
        state = str({"child": child, "parent": parent, "ul": ul, "ur": ur})
        file.write(state + '\n')

# ======================================================================
#                              Visualization
# ======================================================================

    pygame.init()
    counter = 0
    gameDisplay = pygame.display.set_mode((1000,1000))
    clock = pygame.time.Clock()

    running = True
    while(running):
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Map Generation in pygame
        gameDisplay.fill((25,25,25))
        colour1 = (255,0,0)
        colour2 = (50, 50, 80)

        # Inflated obstacles
        pygame.draw.circle(gameDisplay, colour1, (200, 800), 100 + clearance)
        pygame.draw.circle(gameDisplay, colour1, (200, 200), 100 + clearance)
        pygame.draw.polygon(gameDisplay, colour1, ((25 - clearance, 425 - clearance), (175 + clearance, 425 - clearance), (175 + clearance, 575 + clearance), (25 - clearance, 575 + clearance)))
        pygame.draw.polygon(gameDisplay, colour1, ((375 - clearance, 425 - clearance), (625 + clearance, 425 - clearance), (625 + clearance, 575 + clearance), (375 - clearance, 575 + clearance)))
        pygame.draw.polygon(gameDisplay, colour1, ((725 - clearance, 700 - clearance), (875 + clearance, 700 - clearance), (875 + clearance, 900 + clearance), (725 - clearance, 900 + clearance)))

        # Original obstacles
        pygame.draw.circle(gameDisplay, colour2, (200, 800), 100)
        pygame.draw.circle(gameDisplay, colour2, (200, 200), 100)
        pygame.draw.polygon(gameDisplay, colour2, ((25, 425), (175 , 425), (175 , 575 ), (25, 575 )))
        pygame.draw.polygon(gameDisplay, colour2, ((375, 425), (625 , 425), (625 , 575 ), (375, 575 )))
        pygame.draw.polygon(gameDisplay, colour2, ((725, 700), (875 , 700), (875 , 900 ), (725, 900 )))

        # Goal threshold
        pygame.draw.circle(gameDisplay, (0,200,0), (goal.state[0], 1000-goal.state[1]), 15)

        # Display the exploration pattern for the robot
        if counter == 0:
            for node in visitedList:
                child = node.state
                parent = node.parent
                ul = node.ul
                ur = node.ur
                t, x, y = 0, 0, 0     
                r = 3.8    
                L = 3.54    
                dt = 0.05
                D = 0
                theta = child[2]
                prevNode = node.state
                if parent != None:  
                    while t<1:    
                        t = t + dt
                        dx = 0.5*r * (ul + ur) * math.cos(theta) * dt
                        x += dx        
                        dy = 0.5*r * (ul + ur) * math.sin(theta) * dt        
                        y += dy
                        theta+= (r / L) * (ur - ul) * dt        
                        D = D + (dx**2 + dy**2)**0.5
                        currentNode = [child[0] + x, child[1] + y, theta]
                        if node.obstacleCheck(currentNode):
                            continue
                        pygame.draw.line(gameDisplay, (255,255,255), (currentNode[0], 1000-currentNode[1]), (prevNode[0], 1000-prevNode[1]))      
                        prevNode = currentNode
                pygame.display.flip()

        # Display the waypoints that the robot should take
        xCord = []
        yCord = []

        for node in shortest[::1]:
            xCord.append(node.state[0])
            yCord.append(node.state[1])

        for i in range(len(xCord)):
            pygame.draw.circle(gameDisplay, (255, 0, 0), (xCord[i]*100, 1000 - (yCord[i])*100), 5)
        pygame.draw.circle(gameDisplay, (255, 0, 0), (x_start*100, 1000 - (y_start)*100), 20)
        

        pygame.display.flip()
        pygame.display.update()
        pygame.time.wait(5000)

        counter += 1
        running = False

    pygame.quit()

